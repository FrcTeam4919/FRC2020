// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
//import frc.robot.commands.GyroDriveStabilization;
//import frc.robot.commands.Reset;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton gyroStabilization;
    public JoystickButton resetGyro;
    public JoystickButton ShiftForward;
    public JoystickButton ShiftBackward;
    public JoystickButton ShiftLeft;
    public JoystickButton ShiftRight;
    public JoystickButton LimelightAim;
    public JoystickButton LimelightSeek;

    public static Joystick joystick;
    public static Joystick AaronsJoystick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Boolean Stabilize;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(1);
        AaronsJoystick = new Joystick(0);

        gyroStabilization = new JoystickButton(joystick, 1);
        // gyroStabilization.whileHeld(new GyroDriveStabilization());
        resetGyro = new JoystickButton(joystick, 2);
        // resetGyro.whileHeld(new Reset());
        ShiftForward = new JoystickButton(AaronsJoystick, 8);
        ShiftForward.whileHeld(new ShiftForward());
        ShiftBackward = new JoystickButton(AaronsJoystick, 15);
        ShiftBackward.whileHeld(new ShiftBackward());
        ShiftLeft = new JoystickButton(AaronsJoystick, 7);
        ShiftLeft.whileHeld(new ShiftLeft());
        ShiftRight = new JoystickButton(AaronsJoystick, 6);
        ShiftRight.whileHeld(new ShiftRight());
        //LimelightAim = new JoystickButton(AaronsJoystick, 1);
        //LimelightAim.whileHeld(new limelightAim());
        //LimelightSeek = new JoystickButton(AaronsJoystick, 4);
        //LimelightSeek.whileHeld(new limelightSeek());
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

