package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import frc.robot.subsystems.Drivetrain;

public class GyroDriveStabilization extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GyroDriveStabilization() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        System.out.println("Running Stabilization");
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double turningValue = (Drivetrain.kAngleSetpoint - Robot.imu.getAngle()) * Drivetrain.kP;
        // Invert the direction of the turn if we are going backwards
        double Yvalue = Drivetrain.Joystick.getY();
        System.out.println(Yvalue);
		turningValue = Math.copySign(turningValue, Drivetrain.Joystick.getY());
        Drivetrain.westCoastTankDrive.arcadeDrive(Drivetrain.Joystick.getY(), turningValue);
        //double error = -Robot.imu.getRate();

        //Drivetrain.westCoastTankDrive.arcadeDrive(.5 + Drivetrain.kP * error, .5 - Drivetrain.kP * error);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
